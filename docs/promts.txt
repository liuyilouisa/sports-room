个人独立开发一个体育活动室Web应用，基本需求为多用户注册、登录，活动管理，活动报名，活动订单管理，活动列表查看，活动详情查看，活动评论，活动搜索
，前端React v19.1.0+Tailwindcss, 后端Midway 3+TypeOrm+Sqlite 3+swagger 3, 代码上传到Github仓库并利用GitActions集成测试。最后单文件构建。在windows 11环境开发，ide是VSCode。node v20.19.0，npm v11.2.0，pnpm
apps/server:
    dependencies:
      '@midwayjs/bootstrap':
        specifier: ^3.17.9
        version: 3.20.4
      '@midwayjs/core':
        specifier: ^3.17.9
        version: 3.20.4
      '@midwayjs/info':
        specifier: ^3.17.9
        version: 3.20.5
      '@midwayjs/jwt':
        specifier: ^3.17.9
        version: 3.20.9
      '@midwayjs/koa':
        specifier: ^3.17.9
        version: 3.20.5
      '@midwayjs/logger':
        specifier: ^3.4.2
        version: 3.4.2
      '@midwayjs/swagger':
        specifier: ^3.17.9
        version: 3.20.6
      '@midwayjs/typeorm':
        specifier: ^3.17.9
        version: 3.20.4
      '@midwayjs/validate':
        specifier: ^3.17.9
        version: 3.20.5
      bcryptjs:
        specifier: ^3.0.2
        version: 3.0.2
      class-validator:
        specifier: ^0.14.2
        version: 0.14.2
      reflect-metadata:
        specifier: ^0.2.2
        version: 0.2.2
      sqlite3:
        specifier: ^5.1.7
        version: 5.1.7
      typeorm:
        specifier: ^0.3.25
        version: 0.3.25(reflect-metadata@0.2.2)(sqlite3@5.1.7)
    devDependencies:
      '@midwayjs/mock':
        specifier: ^3.17.9
        version: 3.20.4
      '@types/jest':
        specifier: ^29.2.0
        version: 29.5.14
      '@types/node':
        specifier: '14'
        version: 14.18.63
      cross-env:
        specifier: ^6.0.0
        version: 6.0.3
      jest:
        specifier: ^29.2.2
        version: 29.7.0(@types/node@14.18.63)
      mwts:
        specifier: ^1.3.0
        version: 1.3.0(typescript@4.8.4)
      mwtsc:
        specifier: ^1.4.0
        version: 1.15.2
      ts-jest:
        specifier: ^29.0.3
        version: 29.4.0(@babel/core@7.28.0)(@jest/transform@29.7.0)(@jest/types@29.6.3)(babel-jest@29.7.0(@babel/core@7.28.0))(jest-util@29.7.0)(jest@29.7.0(@types/node@14.18.63))(typescript@4.8.4)
      typescript:
        specifier: ~4.8.0
        version: 4.8.4
────────────────
阶段 0　需求澄清 & 任务拆分
1. 用 Notion / Excel 列出 8 个模块：  
   ① 用户注册/登录/找回密码  
   ② 活动 CRUD（后台）  
   ③ 活动列表 + 搜索 + 分页  
   ④ 活动详情 + 评论  
   ⑤ 报名/取消报名 → 生成订单  
   ⑥ 个人订单管理  
   ⑦ 管理后台（审核活动、查看报名）  
   ⑧ 404/403/Loading 等公共页面  
2. 为每个模块写 1 句验收标准（例：「游客输入关键字『篮球』可搜到标题或描述包含篮球且状态=进行中的活动，结果≤100ms」）。

────────────────
阶段 1　仓库初始化 & 基础配置
1. GitHub 新建空仓库 sports-room
2. 本地克隆  
   ```bash
   git clone https://github.com/liuyilouisa/sports-room.git      
   cd sports-room
   ```
3. 目录约定（monorepo）
   ```
   ├─ apps
   │  ├─ front      # React + Tailwind
   │  └─ server     # Midway + SQLite
   ├─ .github
   │  └─ workflows  # GitHub Actions
   └─ README.md
   ```
4. root 下建 `.nvmrc` 写 `20.19.0` 保证 Actions 与本地一致  
5. 建 `package.json`（workspaces 模式）
   ```json
   {
     "name": "sports-root",
     "private": true,
     "workspaces": ["apps/*"]
   }
   ```

────────────────
阶段 2　前端脚手架
1. 创建 React 项目  

2. 安装 TailwindCSS

3. 安装常用库

4. 提交第一次代码  
   ```bash
   git add .
   git commit -m "chore: init vite react + tailwind"
   git push
   ```

────────────────
阶段 3　后端脚手架
1. 在 apps/server 初始化 Midway  

2. 打开 `src/config/config.default.ts`，确认 sqlite 文件路径为 `./sports.db`  
3. 安装常用依赖  

4. 生成用户 & 活动 & 订单三张表的 Entity 与 Migration（用 Midway 自带的 `mw new` 命令即可）  
5. 先跑通「Hello World」  

   浏览器访问 http://localhost:7001/swagger-ui 即可看到接口文档。

────────────────
阶段 4　功能迭代（小步快跑，一个 PR 一个功能）
| 功能 | 前端主要工作 | 后端主要工作 | Git 策略 |
|---|---|---|---|
| 注册/登录 | 页面+表单校验+调用 /api/auth/* | JWT 登录、bcrypt 加密 | feature/auth |
| 活动列表 | React Query 拉 /api/activities | 分页搜索接口 | feature/act-list |
| 活动详情 | 路由 /activity/:id | GET /api/activities/:id | feature/act-detail |
| 报名 | 下单按钮 → POST /api/orders | 事务：减库存+生成订单 | feature/order |
| 评论 | 评论区组件 | POST /api/comments | feature/comment |
| 管理后台 | 隐藏路由 /admin/** | 鉴权中间件 / RoleGuard | feature/admin |

- 每个功能完成后：  
  ① 本地 `npm run test`（前后端各自）  
  ② husky + lint-staged 做代码规范检查  
  ③ push 到远端 → 发 Pull Request → Code Review → Squash Merge

────────────────
阶段 5　GitHub Actions 集成测试
1. `.github/workflows/ci.yml` 双 Job：  
   - job.front：缓存 node_modules → 跑 `npm run build` → 跑 `npm run test:ci`  
   - job.server：缓存 → 建临时 sqlite → `npm run test`  
2. 用 `actions/upload-artifact` 把前端 dist & 后端 coverage 上传，方便排查问题。  
3. README 加 badge：
   ```markdown
   ![CI](https://github.com/yourname/sports-web-app/workflows/CI/badge.svg      )
   ```

────────────────
阶段 6　单文件构建（一键交付）
1. 前端：  
   ```bash
   cd apps/front
   npm run build
   ```
   得到的 `dist/` 只有静态文件。  
2. 后端：用 `@midwayjs/hooks` + bundler 把 server 打包成一个 `server.js` 单文件（Midway 3.x 已支持）  
   ```bash
   cd apps/server
   npm run build:bundler
   ```
   生成 `dist/server.js`（包含 sqlite driver 和静态前端）。  
3. 本地验证  
   ```bash
   node dist/server.js
   ```
   打开 http://localhost:7001 应能直接访问打包后的前端。  
4. Release：在 GitHub Actions 加一步  
   ```yaml
   - name: Release
     uses: softprops/action-gh-release@v1
     with:
       files: |
         apps/server/dist/server.js
   ```

────────────────
阶段 7　部署（可选，可跳过）
- 最轻量：把 `server.js` 拷到任何装有 Node 20 的服务器，`pm2 start server.js --name sports`  
- 自动化：写多一步 Actions 把单文件 scp 到云主机并重启 pm2。

────────────────
阶段 8　收尾
1. 在 README 画系统架构图（draw.io 导出 svg）。  
2. 写「本地开发一条命令」脚本  
   ```json
   "dev": "concurrently \"npm:dev:front\" \"npm:dev:server\"",
   ```
3. 关闭所有 issue，打 tag `v1.0.0`，项目归档。

────────────────
时间线（单人每日 3 小时估算）
- 第 1 天：阶段 0~2 完成  
- 第 2~4 天：阶段 4 完成核心 5 个功能  
- 第 5 天：阶段 5 CI 通过  
- 第 6 天：阶段 6 单文件 & Release  
- 第 7 天：缓冲 + README + 部署



给出登录/注册功能开发的框架